* inheritance
- [X] parent class
- [X] child class
- [X] using inheritance
- [X] add attribute
- [X] overriding constructor
- [X] super() function
- [X] overriding a function/method
- [x] add methods to a class

** Basic inheritance
#+begin_src python
class Person:
	def __init__(self, fname, lname):
		self.fname = fname
		self.lname = lname
	def intro(self):
		print(f"your name is {self.fname} {self.fname}")


#+end_src
* inheritance
#+begin_src python
class Apo(Person):  * inherits from the Person class
	pass

if __name__ == "__main__":
	lolo = ("John", "Doe")
	unangApo = Apo("John", "Doe")
	print(lolo.intro())
	print(unangApo.intro())
#+end_src
*** Inheritance
- allows child class to inherit parent class

*** Parent Class
- a class that is a the base  of a/multiple subclass(es)

*** Child class
- A class that inherits from a parent/super class

** Polymorphism (overriding)
- (one of the definitions) is the act of redefining a parent method in a subclass 
- super() function
	- a function that references the parent class
#+begin_src python
# Overriding constructors
class Person:
    def __init__(self, fname, lname):
        self.fname = fname
        self.lname = lname
 def intro(self): print(f"your name is {self.fname} {self.fname}, a lolo")
class Apo(Person):  # inherits from the Person class
	# overrides the constructor
    def __init__(self, fname, lname, mInitial): 
        super().__init__(fname, lname)
		# the super function in this case references
		# the Person class (the super class)
        self.mInitial = mInitial

	# overrides the intro method
    def intro(self):  # overriding
        print(f"I am {self.fname} {self.lname}, {self.mInitial}")

	# adding another method
    def sayMyInheritedName(self):
        print(f"my inherited name is {self.lname}")


if __name__ == "__main__":
    lolo = Person("Johnny", "Doe")
    unangApo = Apo("John", "Doe", "P")
    print(lolo.intro())
    print(unangApo.intro())

#+end_src
*** primitive language
- checks line by line

*** Activity
Create a program that will copy the attributes and other stuff of a family (includes parents and child)
#+begin_src python
# superclass
class Person:
    def __init__(self, fname, lname):
        self.fname = fname
        self.lname = lname

    # define a method to print the full name of the perfon
    def printName(self):
        print(f"I am {self.fname} {self.lname}")


# a class that inherits from the Person superclass
class FamilyPerson(Person):
    # override the constructor, add the role parameter
    def __init__(self, fname, lname, role):
        super().__init__(
            fname, lname
        )  # call the constructor of parent class and pass arguments
        self.role = role

    # define the ability method
    def ability(self):
        print("Unknown")

    # define the printRole method: prints the role of a family person (parent, child)
    def printRole(self):
        print(f"A {self.role}")


# a class that inherits fromt the FamilyPerson class
class Parent(FamilyPerson):
    def __init__(self, fname, lname):
        super().__init__(fname, lname, "Parent")  # defines the role to be 'Parent'


# inherits from the Parent class
class Father(Parent):
    # override the ability method
    def ability(self):
        print("Ability: Fixes stuff")


# inherits from the Parent class
class Mother(Parent):
    # override the ability method
    def ability(self):
        print("Ability: Shouts like an ambulance")


# inherits from the FamilyPerson class
class Child(FamilyPerson):
    # override the constructor
    # add the mother, father, and hobby as parameters
    def __init__(self, fname, lname, mother, father, hobby):
        super().__init__(fname, lname, "Child")
        self.hobby = hobby
        self.mother = mother
        self.father = father

    # override the printName method
    def printName(self):
        print(
            f"I am {self.fname} {self.lname}. Child of {self.mother.fname} {self.mother.lname} and {self.father.fname} {self.father.lname}"
        )

    # override the ability method
    def ability(self):
        print(f"Ability: i am good at {self.hobby}")


# run the program here
if __name__ == "__main__":
    # create an instance of the Mother class
    mom = Mother("Linda", "Parreno")

    # create an instance of the Father class
    father = Father("Parjadeco", "Parreno")

    # create an instance of the Child class
    child = Child("Emmanuel", "Parreno", mom, father, "sleeping")

    # application of duck typing
    # loop and invoke the printRole, printName, and ability methods of the different objects
    for i in [mom, father, child]:
        i.printRole()
        i.printName()
        i.ability()
        print()

#+end_src

*** output
[[./media/act.png]]
